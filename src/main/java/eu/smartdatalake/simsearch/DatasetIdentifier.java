package eu.smartdatalake.simsearch;

import java.util.UUID;

import com.google.common.io.Files;

/**
 * Provides identification for the attribute of a given dataset.
 */
public class DatasetIdentifier {

	String hashKey = null;
	private DataSource source;	// Either the directory of the CSV file or a JDBC connection
	private String dataset; 	// The name of the actual dataset, i.e., a CSV file or a database table
	int colNumber;
	int operation;		// The type of search operation (0: categorical_topk, 1: spatial_knn, 2: numerical_topk) supported by this data source
	String colName = null;
	
	/**
	 * Constructor
	 * @param connection
	 * @param dataset
	 * @param colNumber
	 */
	public DatasetIdentifier(DataSource source, String dataset, int colNumber) {
		
		this.source = source;
		this.dataset = dataset;
		this.colNumber = colNumber;
		this.colName = Files.getNameWithoutExtension(dataset);   //Initially, use the canonical name of the dataset as the name of this column
		this.operation = -1;			//Initially, no operation has specified on this attribute
		
		UUID uuid = generateUUID();    // Assign a UUID
		this.hashKey = uuid.toString();
	}

	/**
	 * Generates a (non-random) Universally Unique Dataset Identifier (UUID).
	 * @return  A 128-bit value that represents the UUID.
	 */
	private UUID generateUUID() {
		
		UUID uuid = null;
		//UUIDs generated by hashing over the connection and data source name and the column number
		try {
		    byte[] bytes = (source + dataset + colNumber).getBytes("UTF-8");    
			uuid = UUID.nameUUIDFromBytes(bytes);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return uuid;
	}
	
	/**
	 * Assign a column name to the identifier.
	 * @param colName The name to be assigned.
	 */
	public void setColumnName(String colName) {
		
		this.colName = colName;   // Applicable only if the input dataset has a header with column names
	}

	/**
	 * Assign the type of the search operation to the identifier.
	 * @param operation  An integer representing the type of the search operation (0: CATEGORICAL_TOPK; 1:SPATIAL_KNN ; 2:NUMERICAL_TOPK).
	 */
	public void setOperation(int operation) {
		this.operation = operation;
	}
	
	// GETTER methods
	
	public String getDatasetName() {
		return this.dataset;
	}
	
	public DataSource getDataSource() {
		return this.source;
	}
	
	public String getHashKey() {
		return this.hashKey;
	}
	
	public String getColumnName() {
		return this.colName;
	}

	public int getOperation() {
		return operation;
	}

}
